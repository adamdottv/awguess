// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token        String?
  oauth_token_secret String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  games         Game[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id       String   @id @default(cuid())
  userId   String
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  rounds   Round[]
  score    Int      @default(0)
  start    DateTime
  expires  DateTime
  complete Boolean  @default(false)
  streak   Int      @default(0)
  longest  Int      @default(0)
  valid    Boolean  @default(true)
}

model Round {
  id     String    @id @default(cuid())
  gameId String
  game   Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  answer String
  start  DateTime
  end    DateTime?
  choice String?
}
